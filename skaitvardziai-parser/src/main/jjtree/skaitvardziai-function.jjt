options {
	UNICODE_INPUT = true;
	STATIC = false;
	MULTI=false;
	NODE_PREFIX="";
	NODE_SCOPE_HOOK = false;
}

PARSER_BEGIN(TreeParser)

package eu.vytenis.skaitvardziai.parser.tree;

@SuppressWarnings({"serial", "unused"})
public class TreeParser {}

PARSER_END(TreeParser)


SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN: {
	< NULL: "null" >
	| <UNSIGNED_INTEGER: <DIGIT> (<DIGIT>)* >
	| < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
	| < #LETTER: ["a" - "z", "A" - "Z", "_"] >
	| < #DIGIT : ["0" - "9"] >
}

TOKEN: {
	< STRING: (<SINGLE_QUOTED_STRING> | <DOUBLE_QUOTED_STRING>) >
	| < #SINGLE_QUOTED_STRING: "'" (~["'"])* "'" >
	| < #DOUBLE_QUOTED_STRING: "\"" (~["\""])* "\"" >
}

SimpleNode FunctionCall() : {} {
	Identifier() "(" [Arguments()] ")"  <EOF> { return jjtThis; }
}

void Identifier() : {Token value;} {
	value = <IDENTIFIER> {jjtThis.value = value;}
}

void Arguments() : {} {
	Argument() ( "," Argument() )*
}

void Argument() : {} {
	LOOKAHEAD(3)
	Fraction() | Integer() | String() | Null()
}

void Integer() : {} {
	[Minus()] UnsignedInteger()
}

void UnsignedInteger() : {Token value;} {
	value = <UNSIGNED_INTEGER> {jjtThis.value = value;}
}

void String() : {Token value;} {
	value = <STRING> {jjtThis.value = value;}
}

void Null() : {Token value;} {
	value = <NULL> {jjtThis.value = value;}
}

void Fraction() : {} {
	Integer() "/" Integer()
}

void Minus() : {} {
	"-"
}

